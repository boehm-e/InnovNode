{
  "name": "youtube-mp3-downloader",
  "version": "0.4.2",
  "description": "Downloads Youtube videos (in parallel, as streams), encodes the audio data as mp3 and stores them in a defineable location",
  "keywords": [
    "youtube",
    "mp3",
    "download",
    "encode",
    "ffmpeg",
    "parallel",
    "fast",
    "streams"
  ],
  "private": false,
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "async": "^1.5.0",
    "fluent-ffmpeg": "2.0.1",
    "progress-stream": "^1.2.0",
    "ytdl-core": "^0.7.9"
  },
  "author": {
    "name": "TobiLG"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tobilg/youtube-mp3-downloader.git"
  },
  "engines": {
    "node": ">=0.10.14"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/tobilg/youtube-mp3-downloader/blob/master/LICENSE"
    }
  ],
  "bugs": {
    "url": "https://github.com/tobilg/youtube-mp3-downloader/issues"
  },
  "readme": "# Youtube MP3 Downloader\n\nYoutube MP3 Downloader is a module which allows to specify YouTube videos from which the audio data should be extracted, converted to MP3, and stored on disk.\n\n## Installation\n\n### Prerequisites\n\nTo run this project, you need to have a local installation of FFmpeg present on your system. You can download it from https://www.ffmpeg.org/download.html\n\n### Installation via NPM\n\n`npm install youtube-mp3-downloader --save`\n\n### Installation from Github\n\n#### Checkout the project from Github to a local folder\n\n`git clone https://github.com/tobilg/youtube-mp3-downloader.git`\n\n#### Install module dependencies\n\nNavigate to the folder where you checked out the project to in your console. Run `npm install`.\n\n## Running\n\n### Basic example\n\nA basic usage example is the following:\n\n```javascript\nvar YoutubeMp3Downloader = require('youtube-mp3-downloader');\n\n//Configure YoutubeMp3Downloader with your settings\nvar YD = new YoutubeMp3Downloader({\n    \"ffmpegPath\": \"/path/to/ffmpeg\",        // Where is the FFmpeg binary located?\n    \"outputPath\": \"/path/to/mp3/folder\",    // Where should the downloaded and encoded files be stored?\n    \"youtubeVideoQuality\": \"highest\",       // What video quality should be used?\n    \"queueParallelism\": 2,                  // How many parallel downloads/encodes should be started?\n    \"progressTimeout\": 2000                 // How long should be the interval of the progress reports\n});\n\n//Download video and save as MP3 file\nYD.download(\"xh0ctVznxdM\");\n\nYD.on(\"finished\", function(data) {\n    console.log(data);\n});\n\nYD.on(\"error\", function(error) {\n    console.log(error);\n});\n\nYD.on(\"progress\", function(progress) {\n    console.log(progress);\n});\n```\n\nYou can also pass a file name for the respective video, which will then be used. Otherwise, the file name will be derived from the video title.\n```javascript\nYD.download(\"xh0ctVznxdM\", \"Winter By CyberSDF.mp3\");\n```\n\nWhile downloading, every `progressTimeout` timeframe, there will be an `progress` event triggered, outputting an object like\n\n```javascript\n{\n    \"videoId\": \"xh0ctVznxdM\",\n    \"progress\": {\n        \"percentage\": 76.81,\n        \"transferred\": 5619680,\n        \"length\": \"7315910\",\n        \"remaining\": 1696230,\n        \"eta\": 3,\n        \"runtime\": 8,\n        \"delta\": 1834992,\n        \"speed\": 661138.82\n    }\n}\n```\n\nFurthermore, there will be a `queueSize` event emitted when the queue size changes (both positive and negative). This can be caught via\n\n```javascript\nYD.on(\"queueSize\", function(size) {\n    console.log(size);\n});\n```\n\nUpon finish, the following output will be returned:\n\n```javascript\n{\n    \"videoId\": \"xh0ctVznxdM\",\n    \"file\": \"/path/to/mp3/folder/Winter By CyberSDF.mp3\",\n    \"youtubeUrl\": \"http://www.youtube.com/watch?v=xh0ctVznxdM\",\n    \"videoTitle\": \"Winter By CyberSDF ( Genre : Ambient ) Creative Commons\",\n    \"artist\": \"Unknown\",\n    \"title\": \"Winter By CyberSDF ( Genre : Ambient ) Creative Commons\",\n    \"stats\": {\n        \"transferred\": 7315910,\n        \"runtime\": 9,\n        \"averageSpeed\": 713747.31\n    }\n}\n```\n\n### Detailed example\n\nTo use it in a class which provides the downloading functionality, you could use it like this:\n\n**Downloader.js**\n```javascript\nvar YoutubeMp3Downloader = require('youtube-mp3-downloader');\n\nvar Downloader = function() {\n\tvar self = this;\n    \n    //Configure YoutubeMp3Downloader with your settings\n    self.YD = new YoutubeMp3Downloader({\n        \"ffmpegPath\": \"/path/to/ffmpeg\",        // Where is the FFmpeg binary located?\n        \"outputPath\": \"/path/to/mp3/folder\",    // Where should the downloaded and encoded files be stored?\n        \"youtubeVideoQuality\": \"highest\",       // What video quality should be used?\n        \"queueParallelism\": 2,                  // How many parallel downloads/encodes should be started?\n        \"progressTimeout\": 2000                 // How long should be the interval of the progress reports\n    });\n\n\tself.callbacks = {};\n\n\tself.YD.on(\"finished\", function(data) {\n\t\t\n\t\tif (self.callbacks[data.videoId]) {\n\t\t\tself.callbacks[data.videoId](null,data);\n\t\t} else {\n\t\t\tconsole.log(\"Error: No callback for videoId!\");\n\t\t}\n\t\n    });\n\n\tself.YD.on(\"error\", function(error) {\n        console.log(error);\n    });\n\t\n}\n\nDownloader.prototype.getMP3 = function(track, callback){\n\tvar self = this;\n\t\n\t// Register callback\n\tself.callbacks[track.videoId] = callback;\n\t// Trigger download\n    self.YD.download(track.videoId, track.name);\n\t\n}\n\nmodule.exports = Downloader;\n```\n\nThis class can then be used like this:\n\n**usage.js**\n```javascript\nvar Downloader = require(\"./Downloader\");\nvar dl = new Downloader();\nvar i = 0;\n\ndl.getMP3({videoId: \"xh0ctVznxdM\", name: \"Winter By CyberSDF.mp3\"}, function(err,res){\n\ti++;\n\tif(err)\n\t\tthrow err;\n\telse{\n\t\tconsole.log(\"Song \"+ i + \" was downloaded: \" + res.file);\n\t}\n});\n\ndl.getMP3({videoId: \"gQH0t8obtEg\", name: \"United By PlatinumEDM.mp3\"}, function(err,res){\n\ti++;\n\tif(err)\n\t\tthrow err;\n\telse{\n\t\tconsole.log(\"Song \"+ i + \" was downloaded: \" + res.file);\n\t}\n});\n```",
  "readmeFilename": "README.md",
  "_id": "youtube-mp3-downloader@0.4.2",
  "_from": "youtube-mp3-downloader@"
}

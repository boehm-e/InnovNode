/*
 * index.js: Listen for new mail.
 *
 */

var EventEmitter = require('events').EventEmitter;
var ImapConnection = require('imap').ImapConnection;
var MailParser = require('mailparser').MailParser;
var util = require('util');
var Seq = require('seq');

var Notifier = module.exports = function (opts) {
  EventEmitter.call(this);
  var self = this;
  self.options = opts;
  self.connected = false;
  self.imap = new ImapConnection({
    username: opts.username,
    password: opts.password,
    host: opts.host,
    port: opts.port,
    secure: opts.secure,
    debug: opts.debug
  });
  self.imap.on('end',function(){
    util.log('[imap] FIN packet received. Disconnecting...');
    self.emit('end');
  });
  self.imap.on('error',function(err){
    self.emit('error', err);
  });
}
util.inherits(Notifier, EventEmitter);

Notifier.prototype.start = function () {
  var self = this;
  Seq()
    .seq(function () {
      self.imap.connect(this);
    })
    .seq(function () {
      self.connected = true;
      self.emit('connect');
      self.imap.openBox('INBOX', false, this);
    }).seq(function () {
      self.emit('open');
      self.imap.on('mail', function (id) { self.scan(); });
      self.scan();
    }).catch(function (err) { self.emit('error', err); });
  return this;
};

Notifier.prototype.scan = function () {
  var self = this;
  Seq()
    .seq(function () {
      self.imap.search(['UNSEEN'], this);
    })
    .seq(function (results) {
      if (!results || results.length === 0) return;
      self.imap.fetch(results, {markSeen: true}, {
        headers: {parse: false},
        body: true,
        cb: function (fetch) {
          fetch.on('message', function (m) {
            var p = new MailParser();
            p.on('end', function (mail) { self.emit('mail', mail); });
            m.on('data', function (data) { p.write(data.toString()); });
            m.on('end', function () { p.end(); });
          });
        }
      }, function (err) { if (err) self.emit('error', err); });
    }).catch(function (err) { self.emit('error', err); });
  return this;
};

Notifier.prototype.stop = function () {
  if (this.connected)
    this.imap.logout();
  this.emit('stop');
  return this;
};